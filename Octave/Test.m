clear;clc;source "./geometry_helpers_3d.m"# camera matrixglobal K=[180,   0, 320;            0, 180, 240;            0,   0,   1];global cam_transform = [0,  0, 1, 0.2;                       -1,  0, 0,   0;                        0, -1, 0,   0;                        0,  0, 0,   1];    # image_sizeglobal image_rows=480;global image_cols=640;global z_near = 0;global z_far = 5;# dimension of projectionglobal projection_dim=2;################################## TRAJECTORY ##################################datFile = '../dataset/trajectory.dat';[a, id, xg, yg, tg, x, y, t] = textread (datFile, "%s %d %f %f %f %f %f %f");num_poses = id(end)+1;XR_true=zeros(4,4,num_poses);XR_guess=zeros(4,4,num_poses);u = [0; 0; 0; 0; 0; 0];ug = [0; 0; 0; 0; 0; 0];for (pose_num=1:num_poses)    u = [x(pose_num); y(pose_num); 0; 0; 0; t(pose_num)];    Xr=v2t(u);    XR_true(:,:,pose_num)=Xr;        ug = [xg(pose_num); yg(pose_num); 0; tg(pose_num); 0; 0];    Xrg=v2t(ug);    XR_guess(:,:,pose_num)=Xrg;endfor;################################## LANDMARKS ###################################datFile = '../dataset/world.dat';[id, x, y, z, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10] = textread (datFile, "%d %f %f %f %f %f %f %f %f %f %f %f %f %f");num_landmarks = id(end)+1;# landmarks in a matrix, one per columnXL_true=[x'; y'; z'];########################### PROJECTION MEASUREMENTS ############################# generate an ideal number of projection measurements# each pose observes each landmarknum_projection_measurements=num_poses*num_landmarks;Zp=zeros(projection_dim,num_projection_measurements);projection_associations=zeros(2,num_projection_measurements);measurement_num=1;for (pose_num=1:num_poses)    file = ["../dataset/meas-" num2str(pose_num-1,'%05d') ".dat"];    [a, id, land_id, r, c, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10] = textread (file, "%s %d %d %f %f %f %f %f %f %f %f %f %f %f %f", 'HeaderLines', 3);    for (iter=1:size(land_id,1)-1)      landmark_num = land_id(iter)+1;      projection_associations(:,measurement_num)=[pose_num; landmark_num];      Zp(:,measurement_num)=[r(iter); c(iter)];      measurement_num++;    endforendfornum_projection_measurements=measurement_num-1;projection_associations=projection_associations(:,1:num_projection_measurements);Zp=Zp(:,1:num_projection_measurements);disp("Using file")disp("Number of measurements")measurement_numdisp("Sum of measurements")sum(Zp(:))num_projection_measurements2=num_poses*num_landmarks;Zp2=zeros(projection_dim,num_projection_measurements2);projection_associations2=zeros(2,num_projection_measurements2);measurement_num2=1;for (pose_num=1:num_poses)    iXr = inv(cam_transform) * inv(XR_true(:,:,pose_num));        Kr = K * iXr(1:3,1:3);    Kt = K * iXr(1:3,4);        for (landmark_num=1:num_landmarks)            Xl=XL_true(:,landmark_num);            p_cam = Kr * Xl + Kt;            if (p_cam(3) < z_near || p_cam(3) > z_far)        continue;      endif      p_cam = p_cam / p_cam(3);              if (p_cam(1)<0 || p_cam(1)>image_cols || p_cam(2)<0 || p_cam(2)>image_rows)        continue;      endif      projection_associations2(:,measurement_num2)=[pose_num, landmark_num]';      Zp2(:,measurement_num2)=p_cam(1:2);      measurement_num2++;    endforendfornum_projection_measurements2=measurement_num2-1;projection_associations2=projection_associations2(:,1:num_projection_measurements2);Zp2=Zp2(:,1:num_projection_measurements2);# 9,1 900:1000disp("\nUsing calculation")disp("Number of measurements")measurement_num2disp("Sum of measurements")sum(Zp2(:))